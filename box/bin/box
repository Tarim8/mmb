#!/bin/bash

# Start and stop Box daemon
#
# Copyright Tarim 2013,2014,2015,2016,2017
#
# Box is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Box is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Box.  If not, see <http://www.gnu.org/licenses/>.

Prefix="cmd_"
shopt -s nullglob
Me=$(basename $0)

PGIDFile="/tmp/${Me}.pgid"
MyDir="${HOME}/${Me}"
RunDir="${MyDir}/run.d"
Platform="${RunDir}/platform"
LogFile="${Platform}/${Me}.log"
CommandPipe="/tmp/${Me}.pipe"



pollarg() {
    local Arg=$( basename "$1" )
    PollArg="${PollArg} +${Arg%%.*}%l\\n $1"
}

setdevice() {
    local GPIO=$( readlink "$1" )
    GPIO=${GPIO%/value}
    GPIO=${GPIO#/sys/class/gpio/gpio}
    shift

    local OnlyEcho=echo
    case "${GPIO}" in
    [0-9] | [0-9][0-9] | [0-9][0-9][0-9])
        OnlyEcho=""
        ;;
    esac

    $OnlyEcho hwctl export "${GPIO}" "$@"
}

# setlink LINK_PATH TAG
# sets a link LINK to point to LINK_PATH-TAG
#
setlink() {
    local Link="$1"
    local Target=$(basename "$1")-$2

    local OldTarget=$(readlink "${Link}")
    [ "${OldTarget}" = "${Target}" ] || {
        rm -f "${Link}" &&
        ln -sf "${Target}" "${Link}"
        return 0
    }
    return 1
}


# run
# Run daemon - used by start
#
cmd_run() {
    local Arg
    local NodeCmd

    if executable node; then
        NodeCmd=node
    elif executable nodejs; then
        NodeCmd=nodejs
    else
        err "Node not installed"
    fi

    rm -f "${CommandPipe}"
    mkfifo "${CommandPipe}"
    for Arg in ${Platform}/*.output '+%l\n' ${CommandPipe} --delimiters '\2\3\r\n' ${Platform}/*serial --delimiters '\n' --unique ${Platform}/*.input --debounce 50 ${Platform}/*.switch; do
        case "${Arg}" in
        -* | +* | [0-9]* | \\* | *.pipe)
            PollArg="${PollArg} ${Arg}"
            ;;
        *'*'*)
            ;;
        *.pserial)
            pollarg "${Arg}"
            ;;
        *.serial)
            [ -c "${Arg}" ] && {
                pollarg "${Arg}"
                stty 9600 raw -echo -echoe -echok -echoctl -echoke  < ${Arg}
            }
            ;;
        *.switch)
            pollarg "${Arg}"
            setdevice "${Arg}" in both up
            ;;
        *.input)
            pollarg "${Arg}"
            setdevice "${Arg}" in both
            ;;
        *.output)
            setdevice "${Arg}" out
            ;;
        esac
    done

    cd "${RunDir}"
    poll ${PollArg} | ${NodeCmd} "${MyDir}/node_modules/${Me}.js" "${RunDir}"
}



# cmd_start
# Start daemon
#
cmd_start() {
    local Config="/boot/boxcfg.txt"
    local Key
    local Value

    [ -r "${Config}" ] && tr -d '\015' < "${Config}" |
    while read Key Value; do
        case "${Key}" in
        "" | "#"*)
            ;;

        product | platform)
            setlink "${RunDir}/${Key}" "${Value}"
            ;;

        hostname)
            cmd_sethost "${Value}" && {
                echo "Reboot with new hostname ${Value}" >> "${LogFile}"
                sudo raspi-config --expand-rootfs >> "${LogFile}" 2>&1
                sudo reboot
            }
            ;;
        esac
    done

    echo $( date "+%F %T " ) $( ls -l "${RunDir}/product" ) >> "${LogFile}"
    session -watchcmd "$0 cleanup ${RestartDelay:-5}" "${PGIDFile}" "$0" run >> "${LogFile}" 2>&1
}



# cmd_status
# Status of daemon
# If running gives a list of the processes, otherwise says, "Not running"
#
cmd_status() {
    session -status "${PGIDFile}" || {
        echo "Not running"
        return 1
    }
}



# cmd_stop
# Stop daemon
#
cmd_stop() {
    session -kill -sigint "${PGIDFile}"
    sleep 1
    session -kill "${PGIDFile}"
    cmd_cleanup
}



# cmd_cleanup [TIME]
# Set any GPIO outputs to 0, echo respawn message
#
cmd_cleanup() {
    echo "${Me}: cleanup"

    local Arg
    for Arg in ${Platform}/*.output; do
        echo "0" > ${Arg}
    done

    [ -n "$1" ] && {
        sleep ${1}
        echo "${Me}: respawn"
    }
}



# cmd_command [COMMAND]
# Sends a command to the command pipe
#
cmd_command() {
    if [ -w "${CommandPipe}" ]; then
        echo "${*}" > "${CommandPipe}"
    else
        err "No command pipe: ${CommandPipe}"
    fi
}



# cmd_log
# reveal the log file
#
cmd_log() {
    if [ -c ${LogFile} ]; then
        err "Log file is terminal"
    fi
    tail -f "${LogFile}"
}




# cmd_settags
# Set up the control tags
#
cmd_settags() {
    declare -A TagDirs=(
        [attach]="selection/start/selectattachtag"
        [detach]="selection/start/selectdetachtag"
        [forward]="selection/start/forward"
        [backward]="selection/start/backward"
        [start]="universal/errors/start"
        [shutdown]="universal/shutdown"
    )
    local Untag="unsettag"
    local Line
    local TagType
    local TagDir
    local Tag
    local TagPath
    local Tmp

    cmd_stop

    poll '+%l\n' "${CommandPipe}" /dev/stdin --delimiters '\2\3\r\n' ${Platform}/*serial | while 
        echo -e "\n${TagType:+scan ${TagType} tag or }type: ${!TagDirs[@]} ${Untag} quit?"
        read Line
    do
        case "${Line}" in
        "")
            ;;

        [0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F])
            if [ -n "${TagType}" ]; then
                Tag="rfid${Line}.tag"
                TagPath="$(find "${RunDir}/" -name "${Tag}")"

                if [ "${TagType}" = "${Untag}" ]; then
                    if [ -n "${TagPath}" ]; then
                        echo "Removing ${TagPath}"
                        rm "${TagPath}"

                    else
                        echo "Tag ${Tag} does not exist"
                    fi

                else
                    if [ -n "${TagPath}" ]; then
                        echo "Tag ${TagPath} already exists"

                    else
                        echo "Creating ${TagDir}/${Tag}"
                        touch "${TagDir}/${Tag}"
                    fi
                fi

            else
                echo "Tag type not set"
            fi
            ;;

        quit)
            echo "Done"
            pkill poll
            exit 0
            ;;

        "${Untag}")
            TagType="${Line}"
            TagDir=""
            echo "Remove tags"
            ;;

        *)
            local Tmp="${TagDirs[${Line}]}"
            if [ -n "${Tmp}" ]; then
                TagType="${Line}"
                TagDir="${RunDir}/${Tmp}"
                echo "Assign ${Line} tags (${TagDir})"

            else
                echo "Unknown command or tag ${Line}"
            fi
            ;;
        esac
    done
}



# cmd_reboot
# Reboot the server
#
cmd_reboot() {
    sudo shutdown -r now
}

# cmd_halt
# Halt the server
#
cmd_halt() {
    sudo halt
}



# cmd_sethost HOSTNAME
# Set the hostname if it is different from the current name
#
cmd_sethost() {
    local Hostname="$1"
    [ "$(hostname)" = "${Hostname}" ] || {
        sudo sed -i "s/$(hostname)/${Hostname}/" /etc/hosts /etc/hostname
        return 0
    }
    return 1
}
    
# cmd_setup
# Set up the server
#
cmd_setup() {
    local Src="$1"
    shift
    [ -n "${Src}" ] || {
        err "No source"
    }

    cmd_sethost "${1}" && {
        passwd
    }

    mkdir -p "${MyDir}/logs"
    mkdir "${HOME}/bin"

    local CopyCmd="rsync --archive --verbose --delete"
    ${CopyCmd} ${Src}/bin/* ~/bin/
    ${CopyCmd} "${Src}/node_modules" "${MyDir}/"
    ${CopyCmd} "${Src}/run.d" "${MyDir}/"

    sudo cp --preserve=mode,timestamps "${Src}/etc/rc.local" "/etc/rc.local"
    sudo chown root:root /etc/rc.local
    sudo cp --preserve=timestamps "${Src}/boot/"* "/boot/"
}



# test
# test code
#
cmd_test() {
    echo testing...
}


# err
# echo an error and exit
err() {
    echo "$*" 1>&2
    exit 1
}

# executable PROGRAM
# check if it's runable
executable() {
    command -v "$1" >/dev/null 2>&1
}

# cmd_help [COMMAND | all]
# Help
#
cmd_help() {
    local Pattern
    case "$1" in
    "")
        Pattern="/^# ${Prefix}/"
        ;;
    "all")
        Pattern="/^# ${Prefix}/,/^${Prefix}/"
        ;;
    *)
        Pattern="/^# ${Prefix}$1/,/^${Prefix}/"
        ;;
    esac

    awk -v me="$(basename $0) " -v spacer="  " "
        ${Pattern} {
            if( sub( /^# ?/, spacer ) ) {
                found=1
                sub( /^ *${Prefix}/, me )
                print
            }
        }
        END {
            if( !found ) exit(2)
        }
    " < "$0" || {
        err "No help topic"
    }
}




# main

[ "X$1" = "X--test" ] && {
    Test=echo
    shift
}

[ "$#" -eq 0 ] && err "See $(basename $0) help for details"

Cmd="$1"
shift

"cmd_${Cmd}" "$@"
