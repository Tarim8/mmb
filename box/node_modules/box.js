//
// Box
//
// Play audio triggered by RFID tags
//
// Copyright Tarim 2013,2014
//
// Box is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Box is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Box.  If not, see <http://www.gnu.org/licenses/>.

'use strict';
var os = require( 'os' );
var pa = require( 'path' );
var fs = require( 'fs' );
var _ = require( 'underscore' );
var mc = require( 'mediacontrol' );
var log = mc.log;
var action = mc.action;
var Session = mc.Session;

if( process.argv.length < 3 ) {
    log( 'Usage: node box DB_DIR INPUT_STREAM' );
    process.exit();
}

var dbDir = process.argv[2];
// var dbDir = fs.realpathSync( process.argv[2] );
var platformDir = pa.join( dbDir, 'platform-box' );
var inputDevice = process.argv[3] || pa.join( platformDir, 'rfid' );
var commands = new mc.Bed( pa.join( dbDir, 'commands' ) );
var memories = new mc.Bed( pa.join( dbDir, 'memories' ) );
var testBed = new mc.Bed( pa.join( dbDir, 'testbed' ) );

var channel = new mc.Channel();
mc.media.channel = channel;

var recordDir = '/tmp'
var recordName = 'box-recording.wav';
var recordFile = recordName;
var associate = false;

_.templateSettings.interpolate = /\{\{(.+?)\}\}/g;

var recordSession;
function recordStop() {
    if( recordSession ) {
	recordSession.killSession( 'SIGKILL' );
	recordSession = false;
	associate = true;

    } else {
	associate = false;
    }
};

action.record = function( path, options ) {
    recordStop();
    if( options.onAir ) {
	// make directory with sound file
	recordDir = pa.join( dbDir, 'testbed', 'memories', Date.now().toString() );
	fs.mkdirSync( recordDir );
	recordFile = pa.join( recordDir, recordName );

	console.log( "record: " + recordFile );
        recordSession = new Session( 'sox', [
	    '-q',
	    '-t', 'alsa',
	    '-d',
	    recordFile
        ], null, { 'env': {'AUDIODEV': 'hw:1,0'} } );
    }
};

function lookupMemory( tag ) {
    if( testBed.lookSynth( commands, tag ) ) {

    } else {
	if( associate ) {
	    log( 'Tag associate ' + tag );
	    fs.closeSync( fs.openSync( pa.join( recordDir, tag ), 'a' ) );
	    testBed = new mc.Bed( pa.join( dbDir, 'testbed' ) );
	    associate = false;

	} else {
	    log( 'Tag unknown ' + tag );
	}
    }
};

function lookupTag( line ) {
    line = line.toString().replace( /[^0-9a-z]/gi, '' ) + '.tag';
    log( 'Tag lookup ' + line );
    lookupMemory( line );
};

new mc.Reader( inputDevice, lookupTag );

new mc.Session( 'poll', [
	'--debounce', '500',
	'+record%s',
	pa.join( platformDir, 'record.input' )
    ], null, { 'stdout': lookupTag }
);

process.on( 'SIGINT', function() {
    log( 'Process sigint' );
    mc.action.exit();
} );

log(
    'Process start ' +
    fs.readFileSync( pa.join( dbDir, 'VERSION' ) ).toString().replace( /\n/g, ' ' ) +
    os.hostname() + ' ' +
    dbDir + ' ' +
    inputDevice 
);

lookupMemory( 'start.tag' );
