//
// Box
//
// Play audio triggered by RFID tags
//
// Copyright Tarim 2013,2014,2015
//
// Box is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Box is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Box.  If not, see <http://www.gnu.org/licenses/>.

'use strict';
var os = require( 'os' );
var pa = require( 'path' );
var fs = require( 'fs' );
var _ = require( 'underscore' );
var mc = require( 'mediacontrol' );
var log = mc.log;
var action = mc.action;
var Session = mc.Session;

if( process.argv.length < 3 ) {
    log( 'Usage: node box DB_DIR' );
    process.exit();
}

var dbDir = process.argv[2];
// var dbDir = fs.realpathSync( process.argv[2] );
var platformDir = pa.join( dbDir, 'platform' );
var commands = new mc.Bed( pa.join( dbDir, 'commands' ) );
var universal = new mc.Bed( pa.join( dbDir, 'universal' ) );

var selectionPath = pa.join( dbDir, 'selection' );
var selection = {};
fs.readdirSync( selectionPath ).forEach( function( dir ) {
    selection[dir] = (new mc.Bed( pa.join( selectionPath, dir ) )).flowers;
} );

var collectionPath = pa.join( dbDir, 'collection' );
var collection = new mc.Bed( collectionPath );

var channel = new mc.Channel();
mc.media.channel = channel;

_.templateSettings.interpolate = /\{\{(.+?)\}\}/g;

var Tag = '';
var LastTime = 0;

var recordSession;
var recordTmp='/tmp/mcrecord' + process.pid + '.wav';

action.record = function( path, options ) {
    if( recordSession ) {
	recordSession.killSession( 'SIGINT' );
	log( 'Info record end' );

    } else if( options.action === 'record' ) {
	log( 'Info record begin' );
	recordSession = new Session(
	    'voicerec',
	    _.flatten( [
		options.audiodev ? [ '--audiodev', options.audiodev ] : [],
		recordTmp
	    ] ),
	    function() {
		recordSession = false;
		log( 'Info record processed ' + this.exitCode );
	    
		if( this.exitCode === 0 ) {
		    collection.createFlower( recordTmp, {
			destName: '%D.wav',
			move: true,
			success: function() { lookupMemory( 'recordfinished.tag' ); },
			failure: function() { lookupMemory( 'recordfailed.tag' ); }
		    } );
	    
		} else {
		    lookupMemory( 'recordfailed.tag' );
		}
	    }, {}
	);
    }
};

function mod( x, m ) {
    if( m === 0 ) return 0;
    x %= m;
    if( x < 0 ) x += m;
    return x;
};
 
action.play = function( path, options ) {
    var move = parseInt( options.move );
    if( options.move === 'play' ) {
	move = channel.playing || LastTime + 3000 > Date.now() ? 1 : 0;
    } else if( move === NaN ) {
	move = 0;
    }

    collection.currentFlower = mod( collection.currentFlower + move, collection.flowers.length );
    log( 'Info playing ' + collection.currentFlower + ', ' + move );
    commands.synthesize( collection.flowers[collection.currentFlower] );
};

action.attachtag = function( path, options ) {
	if( collection.lookup( Tag ) ) {
	    lookupMenu( 'tagattached.tag' );

	} else {
	    log( 'Info attach ' + Tag );
	    fs.closeSync( fs.openSync( pa.join( collection.flowers[collection.currentFlower].stalk, Tag ), 'a' ) );
	    commands.synthesize( collection.flowers[collection.currentFlower] );
	    collection = new mc.Bed( collectionPath );
	}
};

action.detachtag = function( path, options ) {
	if( collection.lookup( Tag ) ) {
	    log( 'Info detach ' + Tag );
	    fs.unlink( pa.join( collection.flowers[collection.currentFlower].stalk, Tag ) );
	    lookupMenu( 'tagdetached.tag' );
	    collection = new mc.Bed( collectionPath );

	} else {
	    lookupMenu( 'unknown.tag' );
	}
};

var currentMenu = new mc.Bed();
currentMenu.flowers = selection.start;

function lookupMenu( tag ) {
    return commands.synthesize( currentMenu.lookup( tag ) ) ||
	   commands.synthesize( universal.lookup( tag ) );
};

function lookupMemory( tag ) {
    commands.synthesize( universal.lookup( 'busy.tag' ) );

    lookupMenu( tag ) ||
    commands.synthesize( collection.lookup( tag ) ) ||
    lookupMenu( 'unknown.tag' ) ||
    log( 'Tag unknown ' + tag );

    if( mc.marks.select ) {
	currentMenu = new mc.Bed();
	mc.marks.select.forEach( function( name ) {
	    if( selection[name] ) {
		selection[name].forEach( function( flower ) {
		    currentMenu.flowers.push( flower );
		} );

	    } else {
		log( 'Warn no selection ' + name );
	    }
	} );
	delete mc.marks.select;
    }

    commands.synthesize( universal.lookup( 'ready.tag' ) );
    LastTime = Date.now();
};

function lookupTag( line ) {
    Tag = line.
	  toString().
	  replace( /[^0-9a-z_\. ]/gi, '' )
    log( 'Tag lookup ' + Tag );

    lookupMemory( Tag );
};

var reader = new mc.Reader( process.stdin, lookupTag );
process.stdin.resume();

process.on( 'SIGINT', function() {
    log( 'Process sigint' );
    mc.action.exit();
} );

log(
    'Process start ' +
    fs.readFileSync( pa.join( dbDir, 'VERSION' ) ).toString().replace( /\n/g, ' ' ) +
    os.hostname() + ' ' +
    dbDir
);

lookupMemory( 'start.tag' );

